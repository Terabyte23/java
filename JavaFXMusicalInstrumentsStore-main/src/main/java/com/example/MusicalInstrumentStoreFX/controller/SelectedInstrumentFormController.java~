package com.example.MusicalInstrumentStoreFX.controller;

import com.example.MusicalInstrumentStoreFX.MusicalInstrumentStoreFxApplication;
import com.example.MusicalInstrumentStoreFX.loaders.SelectedInstrumentFormModalityLoader;
import com.example.MusicalInstrumentStoreFX.model.entity.AppUser;
import com.example.MusicalInstrumentStoreFX.model.entity.Instruments;
import com.example.MusicalInstrumentStoreFX.service.AppUserService;
import com.example.MusicalInstrumentStoreFX.service.InstrumentsService;
import com.example.MusicalInstrumentStoreFX.service.UserInstrumentService;
import javafx.fxml.FXML;
import javafx.scene.control.Alert;
import javafx.scene.control.Alert.AlertType;
import javafx.scene.control.TextField;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import java.io.IOException;


@Component
public class SelectedInstrumentFormController {

    @Autowired
    private MainFormController mainFormController;
    @Autowired
    private AppUserService appUserService;


    @FXML private VBox vbSelectedInstrumentRoot;
    private Instruments instruments;
    @Autowired
    private SelectedInstrumentFormModalityLoader selectedInstrumentFormModalityLoader;
    @Autowired
    private InstrumentsService instrumentsService;
    @Autowired
    private UserInstrumentService userInstrumentService;
    private AppUser appUser;


    // Инжектируем FormService и InstrumentsService
    public SelectedInstrumentFormController(InstrumentsService instrumentsService, SelectedInstrumentFormModalityLoader selectedInstrumentFormModalityLoader, UserInstrumentService userInstrumentService) {
        this.selectedInstrumentFormModalityLoader = selectedInstrumentFormModalityLoader;
        this.instrumentsService = instrumentsService;
        this.userInstrumentService = userInstrumentService;
    }

    public SelectedInstrumentFormController() {
        // required for FXMLLoader
    }


    // Устанавливаем инструмент, который был выбран
    public void setInstruments(Instruments instruments) {
        this.instruments = instruments;
    }

    public void setAppUser(AppUser appUser) {
        this.appUser = appUser;
    }

    @Autowired
    public void setAppUserService(AppUserService appUserService) {
        this.appUserService = appUserService;
    }


    // Метод для установки ссылки на MainFormController
    public void setMainFormController(MainFormController mainFormController) {
        this.mainFormController = mainFormController;
    }

    @FXML private TextField tfQuantity; // Поле для ввода количества

    @FXML
    private void takeOnInstrument() {
        int quantityToBuy;
        try {
            quantityToBuy = Integer.parseInt(tfQuantity.getText());
            if (quantityToBuy <= 0) throw new NumberFormatException();
        } catch (NumberFormatException e) {
            showAlert("Ошибка", "Введите корректное количество", Alert.AlertType.ERROR);
            return;
        }

        if (instruments.getCount() < quantityToBuy) {
            showAlert("Ошибка", "Недостаточно на складе. Доступно: " + instruments.getCount(), Alert.AlertType.ERROR);
            return;
        }

        double totalCost = quantityToBuy * instruments.getPrice();
        if (appUser.getBalance() < totalCost) {
            showAlert("Ошибка", "Недостаточно средств. Ваш баланс: " + appUser.getBalance(), Alert.AlertType.ERROR);
            return;
        }

        // Всё хорошо — оформляем покупку
        instruments.setCount(instruments.getCount() - quantityToBuy);
        appUser.setBalance(appUser.getBalance() - totalCost);

        instrumentsService.update(instruments);
        appUserService.update(appUser);
        userInstrumentService.saveOrUpdate(appUser, instruments, quantityToBuy);

        showAlert("Успех", "Вы купили инструмент! Списано: " + totalCost, Alert.AlertType.INFORMATION);
        closeWindow();
    }

    @FXML
    private void returnInstrument() {
        int quantityToReturn;
        try {
            quantityToReturn = Integer.parseInt(tfQuantity.getText());
            if (quantityToReturn <= 0) throw new NumberFormatException();
        } catch (NumberFormatException e) {
            showAlert("Ошибка", "Введите корректное количество", Alert.AlertType.ERROR);
            return;
        }

        try {
            userInstrumentService.returnInstrument(appUser, instruments, quantityToReturn);
        } catch (IllegalArgumentException e) {
            showAlert("Ошибка", e.getMessage(), Alert.AlertType.ERROR);
            return;
        }

        instruments.setCount(instruments.getCount() + quantityToReturn);
        instrumentsService.update(instruments);

        double refund = quantityToReturn * instruments.getPrice();
        appUser.setBalance(appUser.getBalance() + refund);
        appUserService.update(appUser);

        showAlert("Успех", "Вы вернули инструмент. Возврат: " + refund, Alert.AlertType.INFORMATION);
        closeWindow();
    }

    private void closeWindow() {
        Stage stage = (Stage) vbSelectedInstrumentRoot.getScene().getWindow();
        stage.close();
    }


    // Метод для отображения всплывающих сообщений
    private void showAlert(String title, String message, AlertType alertType) {
        Alert alert = new Alert(alertType);
        alert.setTitle(title);
        alert.setHeaderText(null);
        alert.setContentText(message);
        alert.showAndWait();
    }

    @FXML
    private void openInstrumentsDetails(Instruments instrument, AppUser appUser) throws IOException {
        if (instrument == null || appUser == null) {
            showAlert("Ошибка", "Инструмент или пользователь не найдены", Alert.AlertType.ERROR);
            return;
        }

        selectedInstrumentFormModalityLoader.load(instrument, appUser);  // Загружаем форму
    }

}
